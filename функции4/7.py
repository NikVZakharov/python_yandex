# Пример демонстрации различий между:
# value = value + addition
# и
# value += addition

# === СЛУЧАЙ 1: ИММУТАБЕЛЬНЫЕ ТИПЫ (int, float, str, tuple) ===
# Поведение будет одинаковым, так как создаётся новый объект

print("=== Пример с immutable типом (int) ===")
a = 10
b = a  # b указывает на тот же объект, что и a
a = a + 5  # создаётся новый объект, a теперь указывает на него
print("После a = a + 5:")
print("a =", a)  # 15
print("b =", b)  # 10 (b остался неизменным)

a = 10
b = a
a += 5  # тоже создаётся новый объект, результат тот же
print("После a += 5:")
print("a =", a)  # 15
print("b =", b)  # 10

# === СЛУЧАЙ 2: МУТАБЕЛЬНЫЕ ТИПЫ (list, dict, set) ===
# Здесь += может модифицировать объект на месте, тогда как value = value + addition создаёт новый

print("\n=== Пример с mutable типом (list) ===")
lst1 = [1, 2]
lst2 = lst1  # обе переменные указывают на один и тот же список
lst1 = lst1 + [3]  # создаётся новый список, lst1 теперь указывает на него
print("После lst1 = lst1 + [3]:")
print("lst1 =", lst1)  # [1, 2, 3]
print("lst2 =", lst2)  # [1, 2] — lst2 остался прежним

lst1 = [1, 2]
lst2 = lst1
lst1 += [3]  # список изменяется на месте, обе переменные видят изменения
print("После lst1 += [3]:")
print("lst1 =", lst1)  # [1, 2, 3]
print("lst2 =", lst2)  # [1, 2, 3] — lst2 тоже изменился!

# === ВЫВОД ===
# - Для неизменяемых типов (`int`, `str` и т.д.) разницы нет: создаётся новый объект.
# - Для изменяемых (`list`, `dict`, `set`) оператор += модифицирует объект на месте,
#   а выражение value = value + addition создаёт новый.
